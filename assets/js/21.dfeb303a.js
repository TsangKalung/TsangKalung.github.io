(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{357:function(t,n,s){"use strict";s.r(n);var a=s(33),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_2018-5-22"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2018-5-22"}},[t._v("#")]),t._v(" 2018/5/22")]),t._v(" "),s("p",[s("strong",[t._v("Today I translated part of an article into Chinese")]),t._v(".")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("Erick 是一位软件开发者，一位 2D 和 3D 计算机图形学的狂热者。他致力于开发电子游戏、3D 特效软件、计算机辅助设计(CAD)软件。对于涉及到模拟现实的东西，他也十分乐意去了解。你可以在他的网站"),s("a",{attrs:{href:"http://erickdransch.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("erickdransch.com"),s("OutboundLink")],1),t._v("找到他。")]),t._v(" "),s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("p",[t._v("人类天生具有创造性。 我们不断设计和构建新颖、有用又有趣的事物。而在现代，我们编写软件来协助设计和创造。计算机辅助设计（CAD）软件使得创作者可以在做出实物设计前去设计建筑、桥梁、电子游戏、电影里的怪物、3D 打印物件以及许多其他的东西。")]),t._v(" "),s("p",[t._v("CAD 工具的核心就是将三维设计抽象到可以在二维的屏幕上查看和编辑。为了实现这个目标，CAD 工具必须提供三个基本功能。首先，它们必须要有用以表示当前被设计物件的数据结构（Data Structure），这是计算机对于用户正在创造的三维世界的理解。第二，他们必须提供一些让设计显示在用户屏幕上的方式。用户正在设计的是实物中的三维物体，然而电脑屏幕却只有两个维度。所以 CAD 工具必须模拟我们感知物体的方式，并把这些三维物体以我们可以理解的样子显示到屏幕上。第三，CAD 工具必须提供与正在设计的物体进行交互的方式。为了生成想要的作品，用户必须能够对设计进行添加和修改。此外，为了使用户可以协作、共享和保存作品，CAD 工具要能够保存和加载磁盘中的设计。")]),t._v(" "),s("p",[t._v("而特定领域的 CAD 工具会提供许多针对特定领域需求的附加功能。比如：建筑 CAD 工具会有用以测试建筑物气候应力的物理模拟功能、3D 打印工具会有检查物体是否能有效打印出来的功能、电气 CAD 工具会模拟电子穿过铜的物理过程，而电影特效套件则可以准确地模拟火焰。但是，所有的 CAD 工具都至少包含上述的三个基本特性：")]),t._v(" "),s("ul",[s("li",[t._v("拥有用以表示设计的数据结构")]),t._v(" "),s("li",[t._v("能够将设计合理显示在屏幕上")]),t._v(" "),s("li",[t._v("能够与设计进行交互")])]),t._v(" "),s("p",[t._v("我们已经了解了这三点，那么让我们一起来看看如何用 500 行 Python 代码来表示 3D 设计，并将其显示在屏幕上使得用户能与其交互。")]),t._v(" "),s("h2",{attrs:{id:"渲染为纲"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染为纲"}},[t._v("#")]),t._v(" 渲染为纲")]),t._v(" "),s("p",[t._v("3D 建模器的许多设计决定都是因渲染过程而做出的。我们希望能在设计中存储和渲染复杂对象，但同时我们又希望能保持渲染代码的低复杂度。为了能够以简单的渲染逻辑来存储和绘制任意的复杂对象，让我们来看看渲染的过程和针对设计的数据结构吧。")]),t._v(" "),s("h3",{attrs:{id:"控制界面和主循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#控制界面和主循环"}},[t._v("#")]),t._v(" 控制界面和主循环")]),t._v(" "),s("p",[t._v("在开始渲染之前，我们需要进行一些设置。首先，我们需要创建一个显示设计的窗口。然后，呈现到屏幕的过程中，我们需要与显卡驱动程序进行通信。但我们一般不会直接进行通信，所以我们使用开放图形库 OpenGL 和 GLUT（OpenGL 实用程序工具包）来控制我们的窗口。")]),t._v(" "),s("h4",{attrs:{id:"关于-opengl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于-opengl"}},[t._v("#")]),t._v(" 关于 OpenGL")]),t._v(" "),s("p",[t._v("OpenGL 是用于跨平台开发的图形 API，它也是跨平台开发图形程序的标准 API。OpenGL 有两个主要的变体：传统 OpenGL 和现代 OpenGL。")]),t._v(" "),s("p",[t._v("在 OpenGL 中，渲染基于由顶点（Vertice）和法线（Normal）定义的多边形。例如，我们会指定 4 个顶点和侧面的法线来渲染立方体的一侧。")]),t._v(" "),s("p",[t._v("传统的 OpenGL 提供了固定渲染管道(Fixed Function Pipeline)。程序员可以通过设置全局变量来启用和禁用诸如照明、着色、面剔除等功能的自动实现。OpenGL 会在之后自动使用已启用的功能来呈现场景。此功能已弃用。")]),t._v(" "),s("p",[t._v("而现代 OpenGL 具有可编程渲染管道（Programmable Rendering Pipeline），程序员在其中编写称为“着色器”（Shader）的小型程序。着色器运行在专用的图形硬件（GPU）上。现代 OpenGL 的可编程渲染管道已经取代了传统 OpenGL。")]),t._v(" "),s("p",[t._v("尽管传统 OpenGL 已被弃用，但我们仍会在这个项目中使用它。传统 OpenGL 提供的固定功能对于保持较小的代码量是非常有用的。它们减少了程序员所需的线性代数知识数量，也简化了我们将会编写的代码。")]),t._v(" "),s("h4",{attrs:{id:"关于-glut"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于-glut"}},[t._v("#")]),t._v(" 关于 GLUT")]),t._v(" "),s("p",[t._v("与 OpenGL 捆绑在一起的 GLUT 使我们可以创建系统窗口并登记（Register）用户界面的回调。GLUT 提供的基本功能对于我们的需求来说已经足够。如果我们想要一个更全面的窗口管理和用户交互库，GTK 或 Qt 这样完整的窗口工具包（Windowing Toolkit）会是更好的选择。")]),t._v(" "),s("h4",{attrs:{id:"viewer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#viewer"}},[t._v("#")]),t._v(" Viewer")]),t._v(" "),s("p",[t._v("为了管理 GLUT 和 OpenGL 的设置以及驱动建模器（Modeller）的冗余部分，我们需要创建一个名为"),s("code",[t._v("Viewer")]),t._v("的类。我们使用一个包含我们程序主循环的"),s("code",[t._v("Viewer")]),t._v("实例来管理窗口的创建和渲染。在"),s("code",[t._v("Viewer")]),t._v("的初始化过程中，我们会创建 GUI 窗口并初始化 OpenGL。")]),t._v(" "),s("p",[t._v("函数"),s("code",[t._v("init_interface")]),t._v("创建了模型将被渲染到的窗口，并指定了设计作品需要渲染时将被调用的函数。 "),s("code",[t._v("init_opengl")]),t._v("函数设置了项目所需的 OpenGL 状态。这包括设置矩阵、实现背面消隐（Backface Culling）、创建光线来照亮场景（Scene），并告诉 OpenGL 我们希望对象被着色（Colored）。"),s("code",[t._v("init_scene")]),t._v("函数创建"),s("code",[t._v("Scene")]),t._v("对象并放置了一些初始节点以使启动用户。我们稍后再讨论关于场景的数据结构的更多细节。最后，"),s("code",[t._v("init_interaction")]),t._v("为用户交互注册回调，稍后我们也会讨论。")]),t._v(" "),s("p",[t._v("在初始化"),s("code",[t._v("Viewer")]),t._v("之后，我们调用"),s("code",[t._v("glutMainLoop")]),t._v("函数将程序的执行转移到 GLUT。这个函数从不会返回（Return）。我们在 GLUT 事件上注册的回调函数将在这些事件发生时被调用。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Viewer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('""" Initialize the viewer. """')]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("init_interface"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("init_opengl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("init_scene"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("init_interaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        init_primitives"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init_interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('""" initialize the window and register the render function """')]),t._v("\n        glutInit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        glutInitWindowSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("640")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("480")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        glutCreateWindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3D Modeller"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        glutInitDisplayMode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GLUT_SINGLE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("GLUT_RGB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        glutDisplayFunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init_opengl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('""" initialize the opengl settings to render the scene """')]),t._v("\n         self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inverseModelView "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numpy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("identity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modelView "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numpy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("identity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        glEnable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_CULL_FACE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        glCullFace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_BACK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        glEnable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_DEPTH_TEST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        glDepthFunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_LESS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        glEnable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_LIGHT0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        glLightfv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_LIGHT0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GL_POSITION"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GLfloat_4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        glLightfv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_LIGHT0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GL_SPOT_DIRECTION"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GLfloat_3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        glColorMaterial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_FRONT_AND_BACK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GL_AMBIENT_AND_DIFFUSE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        glEnable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GL_COLOR_MATERIAL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        glClearColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init_scene")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('""" initialize the scene object and initial scene """')]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scene "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Scene"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_sample_scene"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create_sample_scene")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        cube_node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Cube"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        cube_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("translate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        cube_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color_index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scene"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cube_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        sphere_node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sphere"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        sphere_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("translate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        sphere_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color_index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scene"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sphere_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        hierarchical_node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SnowFigure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        hierarchical_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("translate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scene"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hierarchical_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init_interaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('""" init user interaction and callbacks """')]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interaction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Interaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("register_callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pick'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pick"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("register_callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'move'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("move"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("register_callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'place'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("place"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("register_callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rotate_color'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rotate_color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("register_callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'scale'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scale"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main_loop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            glutMainLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    viewer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Viewer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    viewer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("main_loop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("在进入"),s("code",[t._v("render")]),t._v("函数之前，我们需要讨论一些线性代数的知识。")]),t._v(" "),s("h3",{attrs:{id:"坐标空间（coordinate-space）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#坐标空间（coordinate-space）"}},[t._v("#")]),t._v(" 坐标空间（Coordinate Space）")]),t._v(" "),s("p",[t._v("就我们的目的而言，坐标空间通常由一个原点和三个基本矢量（通常是 "),s("em",[t._v("x")]),t._v(" 轴、 "),s("em",[t._v("y")]),t._v(" 轴和 "),s("em",[t._v("z")]),t._v(" 轴）组成。")]),t._v(" "),s("h3",{attrs:{id:"点（point）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点（point）"}},[t._v("#")]),t._v(" 点（Point）")]),t._v(" "),s("p",[t._v("同样的一个点在不同坐标空间中有不同的表示。而任何三维的点都可以在任何三维坐标空间中表示。")]),t._v(" "),s("h3",{attrs:{id:"向量（vector）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向量（vector）"}},[t._v("#")]),t._v(" 向量（Vector）")]),t._v(" "),s("p",[t._v("矢量表示在由 "),s("em",[t._v("x")]),t._v(" 、"),s("em",[t._v("y")]),t._v("、 "),s("em",[t._v("z")]),t._v(" 轴构成的向量空间中的两个点之间的差值。它的形式为"),s("code",[t._v("(x,y,z)")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"变换矩阵（transformation-matrix）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变换矩阵（transformation-matrix）"}},[t._v("#")]),t._v(" 变换矩阵（Transformation Matrix）")]),t._v(" "),s("p",[t._v("在计算机图形学中，对不同类型的点使用不同的坐标空间，是一种便利的做法。而变换矩阵可以将点从一个坐标空间转换到另一个坐标空间。为了将矢量 "),s("em",[t._v("v")]),t._v(" 从一个坐标空间转换到另一个坐标空间，我们将其乘以一个变换矩阵 "),s("em",[t._v("M：v'= Mv")]),t._v(" 。一些常见的变换矩阵有：平移（Translation）、缩放（Scaling）和旋转(Rotation)。")]),t._v(" "),s("h3",{attrs:{id:"模型、世界、视图和投影坐标空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模型、世界、视图和投影坐标空间"}},[t._v("#")]),t._v(" 模型、世界、视图和投影坐标空间")]),t._v(" "),s("p",[t._v("为了将一个物体绘制在屏幕上，我们常常需要在几个不同的坐标空间之间进行转换。")]),t._v(" "),s("p",[t._v("如图 13.11 右侧所述，所有转换（从"),s("code",[t._v("Eye Space")]),t._v("到"),s("code",[t._v("Viewport Space")]),t._v("）都将由 OpenGL 来处理。")]),t._v(" "),s("p",[t._v("这些转换具体由"),s("code",[t._v("gluPerspective")]),t._v("来处理，而转换为标准化设备空间和视口空间由"),s("code",[t._v("glViewport")]),t._v("处理。这两个矩阵会相乘并存储为"),s("code",[t._v("GL_PROJECTION")]),t._v("矩阵。我们不需要了解这些术语的含义以及这些矩阵为本项目工作的细节。")])])}),[],!1,null,null,null);n.default=e.exports}}]);