(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{185:function(e,t,o){"use strict";o.r(t);var n=o(20),r=Object(n.a)({},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"_2018-5-6"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2018-5-6","aria-hidden":"true"}},[e._v("#")]),e._v(" 2018/5/6")]),e._v(" "),o("h2",{attrs:{id:"electron"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#electron","aria-hidden":"true"}},[e._v("#")]),e._v(" Electron")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("All APIs available in Node.js are available in Electron. Calling the following code from an Electron app works.")])]),e._v(" "),o("li",[o("p",[e._v("There is one important caveat: Native Node.js modules (that is, modules that require compilation of native code before they can be used) will need to be compiled to be used with Electron.")]),e._v(" "),o("blockquote",[o("p",[e._v("The native Node modules are supported by Electron, but since Electron is very likely to use a different V8 version from the Node binary installed in your system, you have to manually specify the location of Electron's headers when building native modules.")])])]),e._v(" "),o("li",[o("p",[e._v("An example of installing "),o("code",[e._v("electron-rebuild")]),e._v(" and then rebuild modules with it:")]),e._v(" "),o("pre",[o("code",[e._v('npm install --save-dev electron-rebuild\n\n# Every time you run "npm install", run this:\n./node_modules/.bin/electron-rebuild\n\n# On Windows if you have trouble, try:\n.\\node_modules\\.bin\\electron-rebuild.cmd\n')])])]),e._v(" "),o("li",[o("p",[o("a",{attrs:{href:"https://electronjs.org/docs/tutorial/security",target:"_blank",rel:"noopener noreferrer"}},[e._v("Security, Native Capabilities, and Your Responsibility"),o("OutboundLink")],1)])]),e._v(" "),o("li",[o("p",[e._v("You can use the "),o("a",{attrs:{href:"https://electronjs.org/docs/api/menu",target:"_blank",rel:"noopener noreferrer"}},[e._v("Menu"),o("OutboundLink")],1),e._v(" module to configure keyboard shortcuts that will be triggered only when the app is "),o("strong",[e._v("focused")]),e._v(". To do so, specify an "),o("code",[e._v("accelerator")]),e._v(" property when creating a "),o("a",{attrs:{href:"https://electronjs.org/docs/api/menu-item",target:"_blank",rel:"noopener noreferrer"}},[e._v("MenuItem"),o("OutboundLink")],1),e._v(".")])]),e._v(" "),o("li",[o("p",[o("a",{attrs:{href:"https://electronjs.org/docs/tutorial/debugging-main-process-vscode",target:"_blank",rel:"noopener noreferrer"}},[e._v("Debugging the Main Process in VSCode."),o("OutboundLink")],1)])]),e._v(" "),o("li",[o("p",[e._v('A "complete tool for building modern Electron applications". Electron Forge unifies the existing (and well maintained) build tools for Electron development into a simple, easy to use package so that anyone can jump right in to Electron development.Forge comes with ready-to-use templates for popular frameworks like React, Vue, or Angular. It uses the same core modules used by the greater Electron community (like electron-packager) â€“ changes made by Electron maintainers (like Slack) benefit Forge\'s users, too.')])]),e._v(" "),o("li",[o("p",[e._v("If you don't want any tools but simply a solid boilerplate to build from, CT Lin's "),o("a",{attrs:{href:"https://github.com/chentsulin/electron-react-boilerplate",target:"_blank",rel:"noopener noreferrer"}},[e._v("electron-react-boilerplate"),o("OutboundLink")],1),e._v(" might be worth a look. It's quite popular in the community and uses electron-builder internally.")])]),e._v(" "),o("li",[o("p",[e._v("Electron supports the "),o("a",{attrs:{href:"https://developer.chrome.com/extensions/devtools",target:"_blank",rel:"noopener noreferrer"}},[e._v("Chrome DevTools Extension"),o("OutboundLink")],1),e._v(", which can be used to extend the ability of devtools for debugging popular web frameworks.")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://github.com/MarshallOfSound/electron-devtools-installer",target:"_blank",rel:"noopener noreferrer"}},[o("code",[e._v("Electron-devtools-installer")]),o("OutboundLink")],1),e._v(", a third-party tool that downloads extensions directly from the Chrome WebStore.")])])]),e._v(" "),o("li",[o("p",[e._v("The most comprehensive tool to debug individual renderer processes is the Chromium Developer Toolset. It is available for all renderer processes, including instances of BrowserWindow, BrowserView, and WebView. You can open them programmatically by calling the openDevTools() API on the webContents of the instance:")])])]),e._v(" "),o("div",{staticClass:"language-Javascript extra-class"},[o("pre",{pre:!0,attrs:{class:"language-javascript"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" BrowserWindow "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),o("span",{pre:!0,attrs:{class:"token string"}},[e._v("'electron'")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),o("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" win "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BrowserWindow")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nwin"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("webContents"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("openDevTools")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),o("ul",[o("li",[e._v("The Chromium Developer Tools can be used to debug Electron's main process.")]),e._v(" "),o("li",[e._v("To handle keyboard shortcuts for a BrowserWindow, use the "),o("code",[e._v("keyup")]),e._v(" and "),o("code",[e._v("keydown")]),e._v(" event listeners on the window object inside the renderer process.")]),e._v(" "),o("li",[e._v("To distribute your app with Electron, you need to download Electron's prebuilt binaries. Next, the folder containing your app should be named "),o("code",[e._v("app")]),e._v(" and placed in Electron's resources directory as shown in the following examples. Note that the location of Electron's prebuilt binaries is indicated with "),o("code",[e._v("electron/")]),e._v(" in the examples below.Then execute Electron.app (or electron on Linux, electron.exe on Windows), and Electron will start as your app. "),o("strong",[e._v("The electron directory will then be your distribution to deliver to final users.")]),e._v(" "),o("ul",[o("li",[e._v("To use an "),o("code",[e._v("asar")]),e._v(" archive to replace the app folder, you need to rename the archive to app.asar, and put it under Electron's resources directory like below, and Electron will then try to read the archive and start from it.")])])]),e._v(" "),o("li",[e._v("You can rename electron.exe to any name you like, and edit its icon and other information with tools like "),o("a",{attrs:{href:"https://github.com/electron/rcedit",target:"_blank",rel:"noopener noreferrer"}},[e._v("rcedit"),o("OutboundLink")],1),e._v(".")])])])},[],!1,null,null,null);t.default=r.exports}}]);